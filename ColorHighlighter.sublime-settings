{
    "enabled": true,
    "style": "default",
    "icons": true,
    "ha_style": "underlined_solid",
    "ha_icons": false,
    "default_keybindings": true,
    "convert_util_path" : "convert",
    "file_exts": [".css", ".sass", ".scss", ".less", ".styl", ".html", ".js", ".sublime-settings", ".tmTheme", ".erb", ".haml", ".back", ".py"],
    "channels": {
        "empty": "",
        "hex2": "[0-9a-fA-F]{2}",
        "hex1": "[0-9a-fA-F]",
        "dec": "\\d{1,3}",
        "float": "(?:[0|1])|(?:[1][\\.]?[0]*)|(?:[0]?[\\.]\\d*)",
        "perc": "\\d{1,3}[%]",
        "hue": "dec",
        "saturation": "perc",
        "value": "perc",
        "lightness": "perc",
    },
    "formats": {
        "@named": {
            "description": "Named css colors"
        },
        "@var-less": {
            "description": "Less variables: @a-b-c"
        },
        "@var-sass": {
            "description": "Sass variables: $a-b-c"
        },
        "@var-styl": {
            "description": "Styl variables: a-b-c"
        },
        "sharp8": {
            "description": "Hex #RRGGBBAA color format",
            "regex": "#(?P<R>)(?P<G>)(?P<B>)(?P<A>)",
            "types": ["hex2", "hex2", "hex2", "hex2"],
            "white": "#FFFFFFFF",
            "disable_exts": [".py"],
        },
        "sharp6": {
            "description": "Hex #RRGGBB color format",
            "regex": "#(?P<R>)(?P<G>)(?P<B>)",
            "types": ["hex2", "hex2", "hex2"],
            "white": "#FFFFFF",
            "after": "sharp8",
            "disable_exts": ".py",
        },
        "sharp4": {
            "description": "Hex #RGBA color format",
            "regex": "#(?P<R>)(?P<G>)(?P<B>)(?P<A>)",
            "types": ["hex1", "hex1", "hex1", "hex1"],
            "white": "#FFFF",
            "after": "sharp6",
        },
        "sharp3": {
            "description": "Hex #RGB color format",
            "regex": "#(?P<R>)(?P<G>)(?P<B>)",
            "types": ["hex1", "hex1", "hex1"],
            "white": "#FFF",
            "after": "sharp4",
        },
        "hex8": {
            "description": "Hex 0xRRGGBBAA color format",
            "regex": "0x(?P<R>)(?P<G>)(?P<B>)(?P<A>)",
            "types": ["hex2", "hex2", "hex2", "hex2"],
            "white": "0xFFFFFFFF",
        },
        "hex6": {
            "description": "Hex 0xRRGGBB color format",
            "regex": "0x(?P<R>)(?P<G>)(?P<B>)",
            "types": ["hex2", "hex2", "hex2"],
            "white": "0xFFFFFF",
            "after": "hex8",
        },
        "hex4": {
            "description": "Hex 0xRGBA color format",
            "regex": "0x(?P<R>)(?P<G>)(?P<B>)(?P<A>)",
            "types": ["hex1", "hex1", "hex1", "hex1"],
            "white": "0xFFFF",
            "after": "hex6",
        },
        "hex3": {
            "description": "Hex 0xRGB color format",
            "regex": "0x(?P<R>)(?P<G>)(?P<B>)",
            "types": ["hex1", "hex1", "hex1"],
            "white": "0xFFF",
            "after": "hex4",
        },
        "rgba": {
            "description": "rgba(255,255,255,1.) color format",
            "regex": "rgba[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[,][ ]*(?P<A>)[ ]*[)]",
            "types": ["dec", "dec", "dec", "float"],
            "white": "rgba(255, 255, 255, 1)",
        },
        "rgb": {
            "description": "rgb(255,255,255) color format",
            "regex": "rgb[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[)]",
            "types": ["dec", "dec", "dec"],
            "white": "rgb(255, 255, 255)",
        },
        "rgba_array": {
            "description": "[r, g, b, a] color format, where each channel can be int(0..255) or float(0. .. 1.) or percentage (0..100)%. For example: [255, 100%, 1., 255]",
            "regex": "[\\[][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[,][ ]*(?P<A>)[ ]*[\\]]",
            "types": ["dec|perc|float", "dec|perc|float", "dec|perc|float", "dec|perc|float"],
            "white": "[255, 255, 255, 255]",
            "disable": true,
        },
        "rgb_array": {
            "description": "[r, g, b] color format, where each channel can be int(0..255) or float(0. .. 1.) or percentage (0..100)%. For example: [255, 100%, 1., 255]",
            "regex": "[\\[][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[\\]]",
            "types": ["dec|perc|float", "dec|perc|float", "dec|perc|float"],
            "white": "[255, 255, 255]",
            "disable": true,
        },
        "hsva": {
            "description": "hsva(hue 0..255, s%, v%, alpha 0.0 .. 1.0) color format",
            "regex": "hsva[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[,][ ]*(?P<A>)[ ]*[)]",
            "types": ["hue", "saturation", "value", "float"],
            "white": "hsva(0, 0%, 100%, 1.)",
        },
        "hsv": {
            "description": "hsv(hue 0..255, s%, v%) color format",
            "regex": "hsv[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[)]",
            "types": ["hue", "saturation", "value"],
            "white": "hsv(0, 0%, 100%)",
        },
        "hsla": {
            "description": "hsla(hue 0..255, s%, v%, alpha 0.0 .. 1.0) color format",
            "regex": "hsla[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[,][ ]*(?P<A>)[ ]*[)]",
            "types": ["hue", "saturation", "lightness", "float"],
            "white": "hsva(0, 0%, 100%, 1.)",
        },
        "hsl": {
            "description": "hsl(hue 0..255, s%, v%) color format",
            "regex": "hsl[(][ ]*(?P<R>)[ ]*[,][ ]*(?P<G>)[ ]*[,][ ]*(?P<B>)[ ]*[)]",
            "types": ["hue", "saturation", "lightness"],
            "white": "hsv(0, 0%, 100%)",
        },
    }
}
